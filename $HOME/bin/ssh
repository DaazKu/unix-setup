#!/usr/bin/env bash
set -euo pipefail

function cleanup() {
  if [[ ! -z ${SSH_WRAPPER_POST-} ]]; then
      eval ${SSH_WRAPPER_POST}
      unset SSH_WRAPPER_POST;
  fi
}
trap cleanup EXIT

if [[ -f "/opt/homebrew/bin/ssh" ]]; then
    SSH_COMMAND="/opt/homebrew/bin/ssh"
else
    SSH_COMMAND="/usr/bin/ssh"
fi
#
# Allow to execute a script that sets some instructions to run before and after
# executing ssh. Prime example would be to change tmux color for specific hosts.
# See .ssh/config.d/tmux_color.sh for an example.
#
export SSH_WRAPPER_SSH_CONFIG=$(${SSH_COMMAND} -G "$@")

# Return early because ssh has been called incorrectly and usage is being shown
if [[ -z ${SSH_WRAPPER_SSH_CONFIG} ]]; then
  exit 1;
fi

SSH_WRAPPER_SCRIPT=$(grep -Po 'setenv SSH_WRAPPER_SCRIPT=\K.+' <<< "${SSH_WRAPPER_SSH_CONFIG}" || echo '')

if [[ -f ~/.ssh/config.d/${SSH_WRAPPER_SCRIPT%%[[:space:]]*} ]]; then
    source ~/.ssh/config.d/${SSH_WRAPPER_SCRIPT}
fi
unset SSH_WRAPPER_SSH_CONFIG;

if [[ ! -z ${SSH_WRAPPER_PRE-} ]]; then
    eval ${SSH_WRAPPER_PRE}
    unset SSH_WRAPPER_PRE;
fi

# Make sure we're using a widely supported term remotely
TERM=xterm ${SSH_COMMAND} "$@";
